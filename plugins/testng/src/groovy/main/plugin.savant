import com.google.inject.Inject
import org.savantbuild.dep.DependencyManager
import org.savantbuild.run.output.Output

@Inject Output output
@Inject DependencyManager dm

String jdk

init {
  String jdkVersion = settings['jdk.version']
  if (jdkVersion == null) {
    ant.fail """You must specify the version of Java that your project uses and provide it as a plugin setting like this:

    plugin(group: "org.savantbuild.plugins", name: "java", version: "0.1", settings: ["jdk.version", "1.6"])"""
  }

  Properties props = loadProperties()
  if (props[jdkVersion] == null) {
    ant.fail "The jdk.version [${jdkVersion}] is not specified in the file ~/.savant/plugins/java.properties. " +
      "You must define the path to the root of the JDK in this file like this:\n\n" +
      "   ${jdkVersion}=/some/path/to/the/jdk"
  }

  jdk = props[jdkVersion]
}

target("conf", description: "Copies the configuration files to the output directory") << { params ->
  if (new File("src/conf/main").directory) {
    ant.copy(todir: "target/classes/main") {
      fileset(dir: "src/conf/main", includes: "**/*")
    }
  }

  Set<String> testSets = testSets(new File("src/conf/test"))
  testSets.each { set ->
    ant.copy(todir: "target/classes/test/${set}") {
      fileset(dir: "src/conf/test/${set}", includes: "**/*")
    }
  }
}

target("compile", dependsOn: "conf", description: "Compiles the Java source files") << { params ->
  ant.dependencypath(pathid: "classpath.compile.main", types: "compile-only,compile", transitive: "false")
  compile(jdk, "src/java/main", "target/classes/main", ["classpath.compile.main"], [])

  Set<String> testSets = testSets(new File("src/java/test"))
  if (testSets.empty) {
    output.info """Dude! You should write some tests and put them in src/java/test directory. Under this directory you can
add sub-directories for each set of tests you want to write such as unit, integration, etc. For example,
you would put your unit tests in the src/java/test/unit directory."""
  } else {
    ant.dependencypath(pathid: "classpath.compile.test", types: "compile-only,compile,test-compile", transitive: "false")
    testSets.each { set ->
      compile(jdk, "src/java/test/${set}", "target/classes/test/${set}", ["classpath.compile.test"], ["target/classes/main"])
    }
  }
}

target("pkg", dependsOn: "compile", description: "Creates the JAR files for the project") << { params ->
  ant.mkdir(dir: "target/jars")
  ant.jar(destfile: "target/jars/${project.name}-${project.version}.jar") {
    fileset(dir: "target/classes/main", includes: "**/*")
    manifest {
      attribute(name: "Implementation-Version", value: "${context.project.version}")
    }
  }

  ant.jar(destfile: "target/jars/${project.name}-${project.version}-src.jar") {
    ant.fileset(dir: "src/java/main", includes: "**/*")
  }
}

target("javadoc", dependsOn: "compile", description: "Creates Javadoc for the project") << { params ->
  ant.mkdir(dir: "target/javadocs")

  ant.delete() {
    ant.fileset(dir: "target/javadocs", excludes: "**/*.gif")
  }

  ant.javadoc(destdir: "target/javadocs",
      author: settings['javadoc.author'],
      version: settings['javadoc.version'],
      "private": settings['javadoc.private'],
      windowtitle: project.name,
      doctitle: project.name,
      bottom: settings['javadoc.bottom'],
      executable: "${jdk}/bin/javadoc") {
    fileset(dir: "src/java/main", includes: "**/*")
    classpath(refid: "classpath.compile.main")
    link(href: settings['javadoc.url.javase'])
    link(href: settings['javadoc.url.javaee'])
  }

  ant.zip(zipfile: "target/javadocs/javadoc.zip", basedir: "target/javadocs")
}

Set<String> testSets(File dir) {
  Set<String> testSets = new HashSet<String>()
  if (dir.directory) {
    File[] files = dir.listFiles()
    files.each { f ->
      if (f.directory && !f.hidden) {
        testSets.add(f.name)
      }
    }
  }

  return testSets
}

Properties loadProperties() {
  def props = new Properties()
  def f = new File(System.getProperty("user.home") + "/.savant/plugins/java.properties")
  if (f.isFile()) {
    f.withReader { reader ->
      props.load(reader)
    }
  }
  return props
}

void compile(String jdk, String src, String output, List<String> refs, List<String> dirs) {
  ant.mkdir(dir: output)
  ant.javac(srcdir: src, destdir: output, debug: settings['java.debug'], deprecation: settings['java.deprecation'],
            includeantruntime: "false", fork: "true", executable: "${jdk}/bin/javac") {
    classpath {
      refs.each { ref ->
        path(refid: ref)
      }
      dirs.each { dir ->
        pathelement(location: dir)
      }
    }
  }
}
